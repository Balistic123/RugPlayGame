{"version":3,"file":"_server.ts-6wRicDyY.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/notifications/_server.ts.js"],"sourcesContent":["import { a as auth } from \"../../../../chunks/auth.js\";\nimport { e as error, j as json } from \"../../../../chunks/index.js\";\nimport { n as notifications, d as db } from \"../../../../chunks/index4.js\";\nimport { eq, and, desc, count } from \"drizzle-orm\";\nconst GET = async ({ url, request }) => {\n  const session = await auth.api.getSession({ headers: request.headers });\n  if (!session?.user) throw error(401, \"Not authenticated\");\n  const userId = Number(session.user.id);\n  const unreadOnly = url.searchParams.get(\"unread_only\") === \"true\";\n  try {\n    const conditions = [eq(notifications.userId, userId)];\n    if (unreadOnly) {\n      conditions.push(eq(notifications.isRead, false));\n    }\n    const whereCondition = and(...conditions);\n    const notificationsList = await db.select({\n      id: notifications.id,\n      type: notifications.type,\n      title: notifications.title,\n      message: notifications.message,\n      link: notifications.link,\n      isRead: notifications.isRead,\n      createdAt: notifications.createdAt\n    }).from(notifications).where(whereCondition).orderBy(desc(notifications.createdAt)).limit(50);\n    const unreadCount = await db.select({ count: count() }).from(notifications).where(and(eq(notifications.userId, userId), eq(notifications.isRead, false))).then((result) => result[0]?.count || 0);\n    return json({\n      notifications: notificationsList,\n      unreadCount\n    });\n  } catch (e) {\n    console.error(\"Failed to fetch notificationss:\", e);\n    throw error(500, \"Failed to fetch notificationss\");\n  }\n};\nconst PATCH = async ({ request }) => {\n  const session = await auth.api.getSession({ headers: request.headers });\n  if (!session?.user) throw error(401, \"Not authenticated\");\n  const userId = Number(session.user.id);\n  const { markAsRead } = await request.json();\n  if (typeof markAsRead !== \"boolean\") {\n    throw error(400, \"Invalid request body\");\n  }\n  try {\n    if (markAsRead) {\n      await db.update(notifications).set({ isRead: true }).where(eq(notifications.userId, userId));\n    }\n    return json({ success: true });\n  } catch (e) {\n    console.error(\"Failed to update notifications:\", e);\n    throw error(500, \"Failed to update notifications\");\n  }\n};\nexport {\n  GET,\n  PATCH\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAIK,MAAC,GAAG,GAAG,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK;AACxC,EAAE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC;AACzE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC,GAAG,EAAE,mBAAmB,CAAC;AAC3D,EAAE,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;AACxC,EAAE,MAAM,UAAU,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,MAAM;AACnE,EAAE,IAAI;AACN,IAAI,MAAM,UAAU,GAAG,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACzD,IAAI,IAAI,UAAU,EAAE;AACpB,MAAM,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACtD;AACA,IAAI,MAAM,cAAc,GAAG,GAAG,CAAC,GAAG,UAAU,CAAC;AAC7C,IAAI,MAAM,iBAAiB,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC;AAC9C,MAAM,EAAE,EAAE,aAAa,CAAC,EAAE;AAC1B,MAAM,IAAI,EAAE,aAAa,CAAC,IAAI;AAC9B,MAAM,KAAK,EAAE,aAAa,CAAC,KAAK;AAChC,MAAM,OAAO,EAAE,aAAa,CAAC,OAAO;AACpC,MAAM,IAAI,EAAE,aAAa,CAAC,IAAI;AAC9B,MAAM,MAAM,EAAE,aAAa,CAAC,MAAM;AAClC,MAAM,SAAS,EAAE,aAAa,CAAC;AAC/B,KAAK,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;AACjG,IAAI,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC;AACrM,IAAI,OAAO,IAAI,CAAC;AAChB,MAAM,aAAa,EAAE,iBAAiB;AACtC,MAAM;AACN,KAAK,CAAC;AACN,GAAG,CAAC,OAAO,CAAC,EAAE;AACd,IAAI,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,CAAC,CAAC;AACvD,IAAI,MAAM,KAAK,CAAC,GAAG,EAAE,gCAAgC,CAAC;AACtD;AACA;AACK,MAAC,KAAK,GAAG,OAAO,EAAE,OAAO,EAAE,KAAK;AACrC,EAAE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC;AACzE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC,GAAG,EAAE,mBAAmB,CAAC;AAC3D,EAAE,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;AACxC,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE;AAC7C,EAAE,IAAI,OAAO,UAAU,KAAK,SAAS,EAAE;AACvC,IAAI,MAAM,KAAK,CAAC,GAAG,EAAE,sBAAsB,CAAC;AAC5C;AACA,EAAE,IAAI;AACN,IAAI,IAAI,UAAU,EAAE;AACpB,MAAM,MAAM,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAClG;AACA,IAAI,OAAO,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAClC,GAAG,CAAC,OAAO,CAAC,EAAE;AACd,IAAI,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,CAAC,CAAC;AACvD,IAAI,MAAM,KAAK,CAAC,GAAG,EAAE,gCAAgC,CAAC;AACtD;AACA;;;;"}