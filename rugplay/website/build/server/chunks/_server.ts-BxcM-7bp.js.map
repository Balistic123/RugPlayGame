{"version":3,"file":"_server.ts-BxcM-7bp.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/coin/_coinSymbol_/trade/_server.ts.js"],"sourcesContent":["import { a as auth } from \"../../../../../../chunks/auth.js\";\nimport { e as error, j as json } from \"../../../../../../chunks/index.js\";\nimport { d as db, c as coin, u as user, g as userPortfolio, t as transaction, b as priceHistory } from \"../../../../../../chunks/index4.js\";\nimport { eq, and } from \"drizzle-orm\";\nimport { c as client } from \"../../../../../../chunks/redis.js\";\nimport { c as calculate24hMetrics, e as executeSellTrade } from \"../../../../../../chunks/amm.js\";\nasync function POST({ params, request }) {\n  const session = await auth.api.getSession({\n    headers: request.headers\n  });\n  if (!session?.user) {\n    throw error(401, \"Not authenticated\");\n  }\n  const { coinSymbol } = params;\n  const { type, amount } = await request.json();\n  if (![\"BUY\", \"SELL\"].includes(type)) {\n    throw error(400, \"Invalid transaction type\");\n  }\n  if (!amount || typeof amount !== \"number\" || !Number.isFinite(amount) || amount <= 0) {\n    throw error(400, \"Invalid amount - must be a positive finite number\");\n  }\n  if (amount > Number.MAX_SAFE_INTEGER) {\n    throw error(400, \"Amount too large\");\n  }\n  const userId = Number(session.user.id);\n  const normalizedSymbol = coinSymbol.toUpperCase();\n  const [coinExists] = await db.select({ id: coin.id }).from(coin).where(eq(coin.symbol, normalizedSymbol)).limit(1);\n  if (!coinExists) {\n    throw error(404, \"Coin not found\");\n  }\n  return await db.transaction(async (tx) => {\n    const [coinData] = await tx.select({\n      id: coin.id,\n      symbol: coin.symbol,\n      name: coin.name,\n      icon: coin.icon,\n      currentPrice: coin.currentPrice,\n      poolCoinAmount: coin.poolCoinAmount,\n      poolBaseCurrencyAmount: coin.poolBaseCurrencyAmount,\n      circulatingSupply: coin.circulatingSupply,\n      isListed: coin.isListed,\n      creatorId: coin.creatorId,\n      tradingUnlocksAt: coin.tradingUnlocksAt,\n      isLocked: coin.isLocked\n    }).from(coin).where(eq(coin.symbol, normalizedSymbol)).for(\"update\").limit(1);\n    if (!coinData) {\n      throw error(404, \"Coin not found\");\n    }\n    if (!coinData.isListed) {\n      throw error(400, \"This coin is delisted and cannot be traded\");\n    }\n    if (coinData.isLocked && coinData.tradingUnlocksAt && userId !== coinData.creatorId) {\n      const unlockTime = new Date(coinData.tradingUnlocksAt);\n      if (/* @__PURE__ */ new Date() < unlockTime) {\n        const remainingSeconds = Math.ceil((unlockTime.getTime() - Date.now()) / 1e3);\n        throw error(400, `Trading is locked. Unlocks in ${remainingSeconds} seconds.`);\n      }\n      await tx.update(coin).set({ isLocked: false }).where(eq(coin.id, coinData.id));\n    }\n    const [userData] = await tx.select({\n      baseCurrencyBalance: user.baseCurrencyBalance,\n      username: user.username,\n      image: user.image\n    }).from(user).where(eq(user.id, userId)).for(\"update\").limit(1);\n    if (!userData) {\n      throw error(404, \"User not found\");\n    }\n    const userBalance = Number(userData.baseCurrencyBalance);\n    const poolCoinAmount = Number(coinData.poolCoinAmount);\n    const poolBaseCurrencyAmount = Number(coinData.poolBaseCurrencyAmount);\n    const currentPrice = Number(coinData.currentPrice);\n    let newPrice;\n    let totalCost;\n    let priceImpact = 0;\n    if (poolCoinAmount <= 0 || poolBaseCurrencyAmount <= 0) {\n      throw error(400, \"Liquidity pool is not properly initialized or is empty. Trading halted.\");\n    }\n    if (type === \"BUY\") {\n      const k = poolCoinAmount * poolBaseCurrencyAmount;\n      const newPoolBaseCurrency = poolBaseCurrencyAmount + amount;\n      const newPoolCoin = k / newPoolBaseCurrency;\n      const coinsBought = poolCoinAmount - newPoolCoin;\n      totalCost = amount;\n      newPrice = newPoolBaseCurrency / newPoolCoin;\n      priceImpact = (newPrice - currentPrice) / currentPrice * 100;\n      if (userBalance < totalCost) {\n        throw error(400, `Insufficient funds. You need *${totalCost.toFixed(6)} BUSS but only have *${userBalance.toFixed(6)} BUSS`);\n      }\n      if (coinsBought <= 0) {\n        throw error(400, \"Trade amount too small - would result in zero tokens\");\n      }\n      await tx.update(user).set({\n        baseCurrencyBalance: (userBalance - totalCost).toString(),\n        updatedAt: /* @__PURE__ */ new Date()\n      }).where(eq(user.id, userId));\n      const [existingHolding] = await tx.select({ quantity: userPortfolio.quantity }).from(userPortfolio).where(and(\n        eq(userPortfolio.userId, userId),\n        eq(userPortfolio.coinId, coinData.id)\n      )).limit(1);\n      if (existingHolding) {\n        const newQuantity = Number(existingHolding.quantity) + coinsBought;\n        await tx.update(userPortfolio).set({\n          quantity: newQuantity.toString(),\n          updatedAt: /* @__PURE__ */ new Date()\n        }).where(and(\n          eq(userPortfolio.userId, userId),\n          eq(userPortfolio.coinId, coinData.id)\n        ));\n      } else {\n        await tx.insert(userPortfolio).values({\n          userId,\n          coinId: coinData.id,\n          quantity: coinsBought.toString()\n        });\n      }\n      await tx.insert(transaction).values({\n        userId,\n        coinId: coinData.id,\n        type: \"BUY\",\n        quantity: coinsBought.toString(),\n        pricePerCoin: (totalCost / coinsBought).toString(),\n        totalBaseCurrencyAmount: totalCost.toString()\n      });\n      await tx.insert(priceHistory).values({\n        coinId: coinData.id,\n        price: newPrice.toString()\n      });\n      const metrics = await calculate24hMetrics(coinData.id, newPrice);\n      await tx.update(coin).set({\n        currentPrice: newPrice.toString(),\n        marketCap: (Number(coinData.circulatingSupply) * newPrice).toString(),\n        poolCoinAmount: newPoolCoin.toString(),\n        poolBaseCurrencyAmount: newPoolBaseCurrency.toString(),\n        change24h: metrics.change24h.toString(),\n        volume24h: metrics.volume24h.toString(),\n        updatedAt: /* @__PURE__ */ new Date()\n      }).where(eq(coin.id, coinData.id));\n      const priceUpdateData = {\n        currentPrice: newPrice,\n        marketCap: Number(coinData.circulatingSupply) * newPrice,\n        change24h: metrics.change24h,\n        volume24h: metrics.volume24h,\n        poolCoinAmount: newPoolCoin,\n        poolBaseCurrencyAmount: newPoolBaseCurrency\n      };\n      const tradeData = {\n        type: \"BUY\",\n        username: userData.username,\n        userImage: userData.image || \"\",\n        amount: coinsBought,\n        coinSymbol: normalizedSymbol,\n        coinName: coinData.name,\n        coinIcon: coinData.icon || \"\",\n        totalValue: totalCost,\n        price: newPrice,\n        timestamp: Date.now(),\n        userId: userId.toString()\n      };\n      await client.publish(`prices:${normalizedSymbol}`, JSON.stringify(priceUpdateData));\n      await client.publish(\"trades:all\", JSON.stringify({\n        type: \"all-trades\",\n        data: tradeData\n      }));\n      if (totalCost >= 1e3) {\n        await client.publish(\"trades:large\", JSON.stringify({\n          type: \"live-trade\",\n          data: tradeData\n        }));\n      }\n      return json({\n        success: true,\n        type: \"BUY\",\n        coinsBought,\n        totalCost,\n        newPrice,\n        priceImpact,\n        newBalance: userBalance - totalCost\n      });\n    } else {\n      const [userHolding] = await tx.select({ quantity: userPortfolio.quantity }).from(userPortfolio).where(and(\n        eq(userPortfolio.userId, userId),\n        eq(userPortfolio.coinId, coinData.id)\n      )).limit(1);\n      if (!userHolding || Number(userHolding.quantity) < amount) {\n        throw error(400, `Insufficient coins. You have ${userHolding ? Number(userHolding.quantity) : 0} but trying to sell ${amount}`);\n      }\n      const maxSellable = Math.floor(Number(coinData.poolCoinAmount) * 0.995);\n      if (amount > maxSellable) {\n        throw error(400, `Cannot sell more than 99.5% of pool tokens. Max sellable: ${maxSellable} tokens`);\n      }\n      const sellResult = await executeSellTrade(tx, coinData, userId, amount);\n      if (!sellResult.success) {\n        throw error(400, \"Trade failed - insufficient liquidity or invalid parameters\");\n      }\n      totalCost = sellResult.baseCurrencyReceived ?? 0;\n      newPrice = sellResult.newPrice;\n      priceImpact = sellResult.priceImpact;\n      if (totalCost <= 0) {\n        throw error(400, \"Trade amount results in zero base currency received\");\n      }\n      await tx.update(user).set({\n        baseCurrencyBalance: (userBalance + totalCost).toString(),\n        updatedAt: /* @__PURE__ */ new Date()\n      }).where(eq(user.id, userId));\n      const newQuantity = Number(userHolding.quantity) - amount;\n      if (newQuantity > 1e-6) {\n        await tx.update(userPortfolio).set({\n          quantity: newQuantity.toString(),\n          updatedAt: /* @__PURE__ */ new Date()\n        }).where(and(\n          eq(userPortfolio.userId, userId),\n          eq(userPortfolio.coinId, coinData.id)\n        ));\n      } else {\n        await tx.delete(userPortfolio).where(and(\n          eq(userPortfolio.userId, userId),\n          eq(userPortfolio.coinId, coinData.id)\n        ));\n      }\n      const metrics = sellResult.metrics || await calculate24hMetrics(coinData.id, newPrice);\n      const priceUpdateData = {\n        currentPrice: newPrice,\n        marketCap: Number(coinData.circulatingSupply) * newPrice,\n        change24h: metrics.change24h,\n        volume24h: metrics.volume24h,\n        poolCoinAmount: sellResult.newPoolCoin,\n        poolBaseCurrencyAmount: sellResult.newPoolBaseCurrency\n      };\n      const tradeData = {\n        type: \"SELL\",\n        username: userData.username,\n        userImage: userData.image || \"\",\n        amount,\n        coinSymbol: normalizedSymbol,\n        coinName: coinData.name,\n        coinIcon: coinData.icon || \"\",\n        totalValue: totalCost,\n        price: newPrice,\n        timestamp: Date.now(),\n        userId: userId.toString()\n      };\n      await client.publish(`prices:${normalizedSymbol}`, JSON.stringify(priceUpdateData));\n      await client.publish(\"trades:all\", JSON.stringify({\n        type: \"all-trades\",\n        data: tradeData\n      }));\n      if (totalCost >= 1e3) {\n        await client.publish(\"trades:large\", JSON.stringify({\n          type: \"live-trade\",\n          data: tradeData\n        }));\n      }\n      return json({\n        success: true,\n        type: \"SELL\",\n        coinsSold: amount,\n        totalReceived: totalCost,\n        newPrice,\n        priceImpact,\n        newBalance: userBalance + totalCost\n      });\n    }\n  });\n}\nexport {\n  POST\n};\n"],"names":[],"mappings":"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"}