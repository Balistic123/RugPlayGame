{"version":3,"file":"_server.ts-Dd0mcY7g.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/rewards/claim/_server.ts.js"],"sourcesContent":["import { a as auth } from \"../../../../../chunks/auth.js\";\nimport { e as error, j as json } from \"../../../../../chunks/index.js\";\nimport { d as db, u as user } from \"../../../../../chunks/index4.js\";\nimport { eq } from \"drizzle-orm\";\nconst TWELVE_HOURS_MS = 12 * 60 * 60 * 1e3;\nconst THIRTY_SIX_HOURS_MS = 36 * 60 * 60 * 1e3;\nconst REWARD_TIERS = [\n  1200,\n  // Day 1\n  1500,\n  // Day 2\n  1800,\n  // Day 3\n  2100,\n  // Day 4\n  2500,\n  // Day 5\n  3e3,\n  // Day 6\n  3500,\n  // Day 7\n  4e3,\n  // Day 8\n  4200,\n  // Day 9\n  4400,\n  // Day 10\n  4600,\n  // Day 11\n  4800,\n  // Day 12\n  5e3,\n  // Day 13\n  5200,\n  // Day 14\n  5400,\n  // Day 15\n  5600,\n  // Day 16\n  5800,\n  // Day 17\n  6e3,\n  // Day 18\n  6200,\n  // Day 19\n  6400,\n  // Day 20\n  6600,\n  // Day 21\n  6800,\n  // Day 22\n  7e3,\n  // Day 23\n  7200,\n  // Day 24\n  7400,\n  // Day 25\n  7600,\n  // Day 26\n  7800,\n  // Day 27\n  8e3,\n  // Day 28\n  8200,\n  // Day 29\n  8500\n  // Day 30+\n];\nconst PRESTIGE_MULTIPLIERS = {\n  0: 1,\n  // No prestige\n  1: 1.25,\n  // 25% bonus\n  2: 1.5,\n  // 50% bonus\n  3: 1.75,\n  // 75% bonus\n  4: 2,\n  // 100% bonus\n  5: 2.5\n  // 150% bonus\n};\nfunction getPrestigeMultiplier(prestigeLevel) {\n  return PRESTIGE_MULTIPLIERS[prestigeLevel] || 1;\n}\nfunction calculateStreak(lastClaim, currentStreak) {\n  if (!lastClaim) return 1;\n  const timeSinceLastClaim = Date.now() - lastClaim.getTime();\n  if (timeSinceLastClaim > THIRTY_SIX_HOURS_MS) return 1;\n  if (timeSinceLastClaim >= TWELVE_HOURS_MS) return currentStreak + 1;\n  return currentStreak;\n}\nfunction calculateReward(streak, prestigeLevel = 0) {\n  const tierIndex = Math.min(streak - 1, REWARD_TIERS.length - 1);\n  const base = REWARD_TIERS[tierIndex];\n  const prestigeMultiplier = getPrestigeMultiplier(prestigeLevel);\n  const prestigeBonus = base * (prestigeMultiplier - 1);\n  const total = base + prestigeBonus;\n  return { total, base, prestigeBonus };\n}\nconst POST = async ({ request }) => {\n  const session = await auth.api.getSession({ headers: request.headers });\n  if (!session?.user) throw error(401, \"Not authenticated\");\n  const userId = Number(session.user.id);\n  const now = /* @__PURE__ */ new Date();\n  return await db.transaction(async (tx) => {\n    const userData = await tx.select({\n      id: user.id,\n      baseCurrencyBalance: user.baseCurrencyBalance,\n      lastRewardClaim: user.lastRewardClaim,\n      totalRewardsClaimed: user.totalRewardsClaimed,\n      loginStreak: user.loginStreak,\n      prestigeLevel: user.prestigeLevel\n    }).from(user).where(eq(user.id, userId)).for(\"update\").limit(1);\n    if (!userData[0]) {\n      throw error(404, \"User not found\");\n    }\n    const currentUser = userData[0];\n    if (currentUser.lastRewardClaim) {\n      const timeSinceLastClaim = now.getTime() - currentUser.lastRewardClaim.getTime();\n      if (timeSinceLastClaim < TWELVE_HOURS_MS) {\n        return json({\n          error: \"Daily reward not yet available\",\n          canClaim: false,\n          timeRemaining: TWELVE_HOURS_MS - timeSinceLastClaim\n        }, { status: 429 });\n      }\n    }\n    const newStreak = calculateStreak(currentUser.lastRewardClaim, currentUser.loginStreak || 0);\n    const reward = calculateReward(newStreak, currentUser.prestigeLevel || 0);\n    const currentBalance = parseFloat(currentUser.baseCurrencyBalance || \"0\");\n    const currentTotalRewards = parseFloat(currentUser.totalRewardsClaimed || \"0\");\n    const newBalance = currentBalance + reward.total;\n    const newTotalRewards = currentTotalRewards + reward.total;\n    await tx.update(user).set({\n      baseCurrencyBalance: newBalance.toFixed(8),\n      lastRewardClaim: now,\n      totalRewardsClaimed: newTotalRewards.toFixed(8),\n      loginStreak: newStreak\n    }).where(eq(user.id, currentUser.id));\n    return json({\n      success: true,\n      rewardAmount: reward.total,\n      baseReward: reward.base,\n      prestigeBonus: reward.prestigeBonus,\n      prestigeLevel: currentUser.prestigeLevel || 0,\n      newBalance,\n      totalRewardsClaimed: newTotalRewards,\n      loginStreak: newStreak,\n      nextClaimTime: new Date(now.getTime() + TWELVE_HOURS_MS)\n    });\n  });\n};\nconst GET = async ({ request }) => {\n  const session = await auth.api.getSession({ headers: request.headers });\n  if (!session?.user) throw error(401, \"Not authenticated\");\n  const [currentUser] = await db.select({\n    id: user.id,\n    baseCurrencyBalance: user.baseCurrencyBalance,\n    lastRewardClaim: user.lastRewardClaim,\n    totalRewardsClaimed: user.totalRewardsClaimed,\n    loginStreak: user.loginStreak,\n    prestigeLevel: user.prestigeLevel\n  }).from(user).where(eq(user.id, Number(session.user.id))).limit(1);\n  if (!currentUser) {\n    throw error(404, \"User not found\");\n  }\n  const now = /* @__PURE__ */ new Date();\n  let canClaim = true;\n  let timeRemaining = 0;\n  let nextClaimTime = null;\n  if (currentUser.lastRewardClaim) {\n    const timeSinceLastClaim = now.getTime() - currentUser.lastRewardClaim.getTime();\n    if (timeSinceLastClaim < TWELVE_HOURS_MS) {\n      canClaim = false;\n      timeRemaining = TWELVE_HOURS_MS - timeSinceLastClaim;\n      nextClaimTime = new Date(currentUser.lastRewardClaim.getTime() + TWELVE_HOURS_MS);\n    }\n  }\n  const potentialStreak = calculateStreak(currentUser.lastRewardClaim, currentUser.loginStreak || 0);\n  const reward = calculateReward(potentialStreak, currentUser.prestigeLevel || 0);\n  return json({\n    canClaim,\n    rewardAmount: reward.total,\n    baseReward: reward.base,\n    prestigeBonus: reward.prestigeBonus,\n    prestigeLevel: currentUser.prestigeLevel || 0,\n    timeRemaining,\n    nextClaimTime,\n    totalRewardsClaimed: Number(currentUser.totalRewardsClaimed || 0),\n    lastRewardClaim: currentUser.lastRewardClaim,\n    loginStreak: currentUser.loginStreak || 0\n  });\n};\nexport {\n  GET,\n  POST\n};\n"],"names":[],"mappings":"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"}