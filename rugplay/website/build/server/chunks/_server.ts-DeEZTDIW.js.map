{"version":3,"file":"_server.ts-DeEZTDIW.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/prestige/_server.ts.js"],"sourcesContent":["import { a as auth } from \"../../../../chunks/auth.js\";\nimport { e as error, j as json } from \"../../../../chunks/index.js\";\nimport { d as db, u as user, c as coin, g as userPortfolio, t as transaction, n as notifications } from \"../../../../chunks/index4.js\";\nimport { eq, sql } from \"drizzle-orm\";\nimport { f as formatValue, g as getPrestigeName, a as getPrestigeCost } from \"../../../../chunks/utils2.js\";\nimport { e as executeSellTrade } from \"../../../../chunks/amm.js\";\nconst POST = async ({ request, locals }) => {\n  const session = await auth.api.getSession({ headers: request.headers });\n  if (!session?.user) throw error(401, \"Not authenticated\");\n  const userId = Number(session.user.id);\n  return await db.transaction(async (tx) => {\n    const [userData] = await tx.select({\n      baseCurrencyBalance: user.baseCurrencyBalance,\n      prestigeLevel: user.prestigeLevel\n    }).from(user).where(eq(user.id, userId)).for(\"update\").limit(1);\n    if (!userData) throw error(404, \"User not found\");\n    const currentPrestige = userData.prestigeLevel || 0;\n    const nextPrestige = currentPrestige + 1;\n    const prestigeCost = getPrestigeCost(nextPrestige);\n    const prestigeName = getPrestigeName(nextPrestige);\n    if (!prestigeCost || !prestigeName) {\n      throw error(400, \"Maximum prestige level reached\");\n    }\n    const currentCashBalance = Number(userData.baseCurrencyBalance);\n    if (currentCashBalance < prestigeCost) {\n      throw error(400, `Insufficient cash funds for prestige. Need ${formatValue(prestigeCost)} cash, have ${formatValue(currentCashBalance)} cash. Coin holdings cannot be used for prestige costs.`);\n    }\n    const holdings = await tx.select({\n      coinId: userPortfolio.coinId,\n      quantity: userPortfolio.quantity,\n      currentPrice: coin.currentPrice,\n      symbol: coin.symbol,\n      poolCoinAmount: coin.poolCoinAmount,\n      poolBaseCurrencyAmount: coin.poolBaseCurrencyAmount,\n      circulatingSupply: coin.circulatingSupply\n    }).from(userPortfolio).leftJoin(coin, eq(userPortfolio.coinId, coin.id)).where(eq(userPortfolio.userId, userId));\n    let warningMessage = \"\";\n    let totalSaleValue = 0;\n    if (holdings.length > 0) {\n      warningMessage = `All ${holdings.length} coin holdings have been sold at current market prices. `;\n      for (const holding of holdings) {\n        const quantity = Number(holding.quantity);\n        const currentPrice = Number(holding.currentPrice);\n        if (Number(holding.poolCoinAmount) <= 0 || Number(holding.poolBaseCurrencyAmount) <= 0) {\n          const fallbackValue = quantity * currentPrice;\n          totalSaleValue += fallbackValue;\n          await tx.insert(transaction).values({\n            userId,\n            coinId: holding.coinId,\n            type: \"SELL\",\n            quantity: holding.quantity,\n            pricePerCoin: holding.currentPrice || \"0\",\n            totalBaseCurrencyAmount: fallbackValue.toString(),\n            timestamp: /* @__PURE__ */ new Date()\n          });\n          continue;\n        }\n        const sellResult = await executeSellTrade(tx, {\n          id: holding.coinId,\n          poolCoinAmount: holding.poolCoinAmount,\n          poolBaseCurrencyAmount: holding.poolBaseCurrencyAmount,\n          currentPrice: holding.currentPrice,\n          circulatingSupply: holding.circulatingSupply\n        }, userId, quantity);\n        if (sellResult.success && sellResult.baseCurrencyReceived) {\n          totalSaleValue += sellResult.baseCurrencyReceived;\n        } else {\n          totalSaleValue += sellResult.fallbackValue || quantity * currentPrice;\n        }\n      }\n      await tx.delete(userPortfolio).where(eq(userPortfolio.userId, userId));\n    }\n    await tx.update(user).set({\n      baseCurrencyBalance: \"100.00000000\",\n      prestigeLevel: nextPrestige,\n      lastRewardClaim: null,\n      updatedAt: /* @__PURE__ */ new Date()\n    }).where(eq(user.id, userId));\n    await tx.delete(userPortfolio).where(eq(userPortfolio.userId, userId));\n    await tx.insert(notifications).values({\n      userId,\n      type: \"SYSTEM\",\n      title: `${prestigeName} Achieved!`,\n      message: `Congratulations! You have successfully reached ${prestigeName}. Your portfolio has been reset, daily reward cooldown has been cleared, and you can now start fresh with your new prestige badge and enhanced daily rewards.`,\n      link: `/user/${userId}`\n    });\n    return json({\n      success: true,\n      newPrestigeLevel: nextPrestige,\n      costPaid: prestigeCost,\n      coinsSold: holdings.length,\n      totalSaleValue,\n      message: `${warningMessage}Congratulations! You've reached Prestige ${nextPrestige}!`\n    });\n  });\n};\nconst GET = async ({ request }) => {\n  const session = await auth.api.getSession({ headers: request.headers });\n  if (!session?.user) throw error(401, \"Not authenticated\");\n  const userId = Number(session.user.id);\n  const [userProfile] = await db.select({\n    id: user.id,\n    name: user.name,\n    username: user.username,\n    bio: user.bio,\n    image: user.image,\n    createdAt: user.createdAt,\n    baseCurrencyBalance: user.baseCurrencyBalance,\n    isAdmin: user.isAdmin,\n    loginStreak: user.loginStreak,\n    prestigeLevel: user.prestigeLevel\n  }).from(user).where(eq(user.id, userId)).limit(1);\n  if (!userProfile) {\n    throw error(404, \"User not found\");\n  }\n  const [portfolioStats] = await db.select({\n    holdingsCount: sql`COUNT(*)`,\n    holdingsValue: sql`COALESCE(SUM(CAST(${userPortfolio.quantity} AS NUMERIC) * CAST(${coin.currentPrice} AS NUMERIC)), 0)`\n  }).from(userPortfolio).leftJoin(coin, eq(userPortfolio.coinId, coin.id)).where(eq(userPortfolio.userId, userId));\n  const baseCurrencyBalance = Number(userProfile.baseCurrencyBalance);\n  const holdingsValue = Number(portfolioStats?.holdingsValue || 0);\n  const holdingsCount = Number(portfolioStats?.holdingsCount || 0);\n  const totalPortfolioValue = baseCurrencyBalance + holdingsValue;\n  return json({\n    profile: {\n      ...userProfile,\n      baseCurrencyBalance,\n      totalPortfolioValue,\n      prestigeLevel: userProfile.prestigeLevel || 0\n    },\n    stats: {\n      totalPortfolioValue,\n      baseCurrencyBalance,\n      holdingsValue,\n      holdingsCount,\n      coinsCreated: 0,\n      totalTransactions: 0,\n      totalBuyVolume: 0,\n      totalSellVolume: 0,\n      transactions24h: 0,\n      buyVolume24h: 0,\n      sellVolume24h: 0\n    }\n  });\n};\nexport {\n  GET,\n  POST\n};\n"],"names":[],"mappings":"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"}