{"version":3,"file":"_server.ts-Dkw0L_ww.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/leaderboard/_server.ts.js"],"sourcesContent":["import { j as json } from \"../../../../chunks/index.js\";\nimport { d as db, u as user, g as userPortfolio, c as coin, t as transaction } from \"../../../../chunks/index4.js\";\nimport { sql, eq, ilike, desc, count, gte, inArray } from \"drizzle-orm\";\nasync function getLeaderboardData() {\n  try {\n    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1e3);\n    const topRugpullers = await db.select({\n      userId: user.id,\n      username: user.username,\n      name: user.name,\n      image: user.image,\n      totalSold: sql`COALESCE(SUM(CASE WHEN ${transaction.type} = 'SELL' THEN CAST(${transaction.totalBaseCurrencyAmount} AS NUMERIC) ELSE 0 END), 0)`,\n      totalBought: sql`COALESCE(SUM(CASE WHEN ${transaction.type} = 'BUY' THEN CAST(${transaction.totalBaseCurrencyAmount} AS NUMERIC) ELSE 0 END), 0)`\n    }).from(transaction).innerJoin(user, eq(transaction.userId, user.id)).where(gte(transaction.timestamp, twentyFourHoursAgo)).groupBy(user.id, user.username, user.name, user.image).orderBy(desc(sql`SUM(CASE WHEN ${transaction.type} = 'SELL' THEN CAST(${transaction.totalBaseCurrencyAmount} AS NUMERIC) ELSE 0 END) - SUM(CASE WHEN ${transaction.type} = 'BUY' THEN CAST(${transaction.totalBaseCurrencyAmount} AS NUMERIC) ELSE 0 END)`)).limit(10);\n    const userTransactions = await db.select({\n      userId: user.id,\n      username: user.username,\n      name: user.name,\n      image: user.image,\n      type: transaction.type,\n      coinId: transaction.coinId,\n      totalAmount: sql`CAST(${transaction.totalBaseCurrencyAmount} AS NUMERIC)`,\n      quantity: sql`CAST(${transaction.quantity} AS NUMERIC)`\n    }).from(transaction).innerJoin(user, eq(transaction.userId, user.id)).where(gte(transaction.timestamp, twentyFourHoursAgo));\n    const userNetCalculations = /* @__PURE__ */ new Map();\n    for (const tx of userTransactions) {\n      if (!userNetCalculations.has(tx.userId)) {\n        userNetCalculations.set(tx.userId, {\n          userId: tx.userId,\n          username: tx.username,\n          name: tx.name,\n          image: tx.image,\n          totalBought: 0,\n          totalSold: 0,\n          coinHoldings: /* @__PURE__ */ new Map()\n        });\n      }\n      const userData = userNetCalculations.get(tx.userId);\n      if (tx.type === \"BUY\") {\n        userData.totalBought += Number(tx.totalAmount);\n        const currentHolding = userData.coinHoldings.get(tx.coinId) || 0;\n        userData.coinHoldings.set(tx.coinId, currentHolding + Number(tx.quantity));\n      } else {\n        userData.totalSold += Number(tx.totalAmount);\n        const currentHolding = userData.coinHoldings.get(tx.coinId) || 0;\n        userData.coinHoldings.set(tx.coinId, currentHolding - Number(tx.quantity));\n      }\n    }\n    const uniqueCoinIds = /* @__PURE__ */ new Set();\n    for (const userData of userNetCalculations.values()) {\n      for (const [coinId] of userData.coinHoldings.entries()) {\n        uniqueCoinIds.add(coinId);\n      }\n    }\n    const coinPrices = /* @__PURE__ */ new Map();\n    if (uniqueCoinIds.size > 0) {\n      const coinPricesData = await db.select({ id: coin.id, currentPrice: coin.currentPrice }).from(coin).where(inArray(coin.id, Array.from(uniqueCoinIds)));\n      for (const coinData of coinPricesData) {\n        coinPrices.set(coinData.id, Number(coinData.currentPrice || 0));\n      }\n    }\n    const biggestLosersData = [];\n    for (const userData of userNetCalculations.values()) {\n      let currentHoldingsValue = 0;\n      for (const [coinId, quantity] of userData.coinHoldings.entries()) {\n        if (quantity > 0) {\n          const price = coinPrices.get(coinId) || 0;\n          currentHoldingsValue += quantity * price;\n        }\n      }\n      const netLoss = userData.totalBought - userData.totalSold - currentHoldingsValue;\n      if (netLoss > 0) {\n        biggestLosersData.push({\n          userId: userData.userId,\n          username: userData.username,\n          name: userData.name,\n          image: userData.image,\n          moneySpent: userData.totalBought,\n          moneyReceived: userData.totalSold,\n          currentValue: currentHoldingsValue,\n          totalLoss: netLoss\n        });\n      }\n    }\n    const [cashKings, paperMillionaires] = await Promise.all([\n      db.select({\n        userId: user.id,\n        username: user.username,\n        name: user.name,\n        image: user.image,\n        baseCurrencyBalance: user.baseCurrencyBalance,\n        coinValue: sql`COALESCE(SUM(CAST(${userPortfolio.quantity} AS NUMERIC) * CAST(${coin.currentPrice} AS NUMERIC)), 0)`\n      }).from(user).leftJoin(userPortfolio, eq(userPortfolio.userId, user.id)).leftJoin(coin, eq(coin.id, userPortfolio.coinId)).groupBy(user.id, user.username, user.name, user.image, user.baseCurrencyBalance).orderBy(desc(sql`CAST(${user.baseCurrencyBalance} AS NUMERIC)`)).limit(10),\n      db.select({\n        userId: user.id,\n        username: user.username,\n        name: user.name,\n        image: user.image,\n        baseCurrencyBalance: user.baseCurrencyBalance,\n        coinValue: sql`COALESCE(SUM(CAST(${userPortfolio.quantity} AS NUMERIC) * CAST(${coin.currentPrice} AS NUMERIC)), 0)`\n      }).from(user).leftJoin(userPortfolio, eq(userPortfolio.userId, user.id)).leftJoin(coin, eq(coin.id, userPortfolio.coinId)).groupBy(user.id, user.username, user.name, user.image, user.baseCurrencyBalance).orderBy(desc(sql`CAST(${user.baseCurrencyBalance} AS NUMERIC) + COALESCE(SUM(CAST(${userPortfolio.quantity} AS NUMERIC) * CAST(${coin.currentPrice} AS NUMERIC)), 0)`)).limit(10)\n    ]);\n    const processUser = (user2) => {\n      const baseCurrencyBalance = Number(user2.baseCurrencyBalance);\n      const coinValue = Number(user2.coinValue);\n      const totalPortfolioValue = baseCurrencyBalance + coinValue;\n      return {\n        ...user2,\n        baseCurrencyBalance,\n        coinValue,\n        totalPortfolioValue,\n        liquidityRatio: totalPortfolioValue > 0 ? baseCurrencyBalance / totalPortfolioValue : 0\n      };\n    };\n    const processedRugpullers = topRugpullers.map((user2) => ({ ...user2, totalExtracted: Number(user2.totalSold) - Number(user2.totalBought) })).filter((user2) => user2.totalExtracted > 0);\n    const aggregatedLosers = biggestLosersData.sort((a, b) => b.totalLoss - a.totalLoss).slice(0, 10);\n    const processedCashKings = cashKings.map(processUser);\n    const processedPaperMillionaires = paperMillionaires.map(processUser);\n    return json({\n      topRugpullers: processedRugpullers,\n      biggestLosers: aggregatedLosers,\n      cashKings: processedCashKings,\n      paperMillionaires: processedPaperMillionaires\n    });\n  } catch (error) {\n    console.error(\"Failed to fetch leaderboard data:\", error);\n    return json({\n      topRugpullers: [],\n      biggestLosers: [],\n      cashKings: [],\n      paperMillionaires: []\n    });\n  }\n}\nasync function getSearchedUsers(query, limit = 9, offset = 0) {\n  try {\n    const results = await db.select({\n      id: user.id,\n      name: user.name,\n      username: user.username,\n      image: user.image,\n      bio: user.bio,\n      baseCurrencyBalance: user.baseCurrencyBalance,\n      coinValue: sql`COALESCE(SUM(CAST(${userPortfolio.quantity} AS NUMERIC) * CAST(${coin.currentPrice} AS NUMERIC)), 0)`,\n      totalPortfolioValue: sql`CAST(${user.baseCurrencyBalance} AS NUMERIC) + COALESCE(SUM(CAST(${userPortfolio.quantity} AS NUMERIC) * CAST(${coin.currentPrice} AS NUMERIC)), 0)`,\n      createdAt: user.createdAt\n    }).from(user).leftJoin(userPortfolio, eq(userPortfolio.userId, user.id)).leftJoin(coin, eq(coin.id, userPortfolio.coinId)).groupBy(user.id, user.name, user.username, user.image, user.bio, user.baseCurrencyBalance).where(ilike(user.username, `%${query}%`)).orderBy(desc(user.username)).limit(limit).offset(offset);\n    const total = await db.select({ count: count() }).from(user).where(ilike(user.username, `%${query}%`)).limit(1);\n    return {\n      results,\n      total: total[0].count\n    };\n  } catch (error) {\n    return {\n      results: [],\n      total: 0\n    };\n  }\n}\nasync function GET({ url }) {\n  const query = url.searchParams.get(\"search\");\n  if (query?.trim() !== \"\" && query !== null) {\n    const limit = parseInt(url.searchParams.get(\"limit\") || \"9\");\n    const offset = parseInt(url.searchParams.get(\"offset\") || \"0\");\n    let users = await getSearchedUsers(query, limit, offset);\n    return json(users);\n  }\n  return await getLeaderboardData();\n}\nexport {\n  GET\n};\n"],"names":[],"mappings":"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"}